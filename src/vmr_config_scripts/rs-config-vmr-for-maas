#!/usr/bin/env run-router-script
#
#  Configure MQTT for the router
#
<%args>
plan       => "shared" # The VMR plan type. Either 'shared' or 'dedicated'
portSeed   => 7000     # A seed port where Solace services will begin port allocation.
fileUserPass => "u4EANiNxwS6C"
adminPass => "u4EANiNxwS6C"
</%args>

<%script type = "cli">

# Start by removing any existing VPNs.
<& rs-rm-vpns &>
<& rs-rm-usernames &>

# Configure a user for file transfers
home
enable
configure
create username fileuser password <% $fileUserPass %> file-transfer
end

# Set the admin cli user password (If password instead of key was used, we'll just be setting the same password, thus a NOOP)
home
enable
configure
username admin
change-password <% $adminPass %>
end

%if ($plan eq "shared") 
%{
%   my $countClientUsernames = 20;

    # For Shared VMR Plans, must do the following
    # 1) Must disable default message VPN
    # 2) Must create the 5 required VPNs with configuration

    # Disable default message VPN.
    home
    enable
    configure
    message-vpn "default"
        shutdown
    end 

    home
    enable
    configure

    # SMF ports :
    #   plain-text port: SeedPort
    #   compressed port: SeedPort + 1
    #   routing-control port: SeedPort + 2
    #   ssl port : SeedPort + 3
    service smf shutdown
    service smf listen-port <% $portSeed++ %>
    service smf listen-port <% $portSeed++ %> compressed
    service smf listen-port <% $portSeed++ %> routing-control
    service smf listen-port <% $portSeed++ %> ssl
    no service smf shutdown

    # SMF Web-transport ports :
    #   plain-text port: SeedPort + 4
    #   plain-text port: SeedPort + 5
    service web-transport shutdown
    service web-transport listen-port <% $portSeed++ %>
    service web-transport listen-port <% $portSeed++ %> ssl
    no service web-transport shutdown

    # VPN Specific ports starts at VpnSeedPort.  VpnSeedPort = (SeedPort + 6) + (vpnId-1)*(portsPerVpn)
    # portsPerVpn = 6  (2 Rests, and 4 Mqtt ports)

    # Create 5 required VPNs
%   for my $vpnId (1 .. 5)
%   {
%       my $msgVpnName = "v" . sprintf("%03d", $vpnId);

        home
        enable
        configure
    
        ! pragma:interpreter:ignore-already-exists
        create message-vpn <% $msgVpnName %>
        ! pragma:interpreter:no-ignore-already-exists
        exit

        message-vpn <% $msgVpnName %>
        authentication
            user-class "client"
              basic auth-type "internal"
              no basic radius-domain
              no basic shutdown
              exit
        exit
        authorization
            user-class "client"
              ldap group-membership-attribute-name "memberOf"
              authorization-type "internal"
              exit
            exit
        max-connections 200
        max-subscriptions 100000

        # Setup max 200 SMF connections for this VPN and enable SMF for VPN
        service smf max-connections 200
        no service smf plain-text shutdown
        no service smf ssl shutdown

        # Setup max 200 web-transport connections for this VPN
        service web-transport max-connections 200

        # REST
        # plain-text port : VpnSeedPort
        # ssl port : VpnSeedPort + 1
        service rest incoming max-connections 200
        service rest incoming listen-port <% $portSeed++ %>
        no service rest incoming plain-text shutdown
        service rest incoming listen-port <% $portSeed++ %> ssl
        no service rest incoming ssl shutdown
        service rest outgoing max-connections 200

        # MQTT
        # plain-text port : VpnSeedPort + 2
        # ssl port : VpnSeedPort + 3
        # web port : VpnSeedPort + 4
        # web ssl port : VpnSeedPort + 5
        service mqtt max-connections 200
        service mqtt listen-port <% $portSeed++ %>
        no service mqtt plain-text shutdown
        service mqtt listen-port <% $portSeed++ %> ssl
        no service mqtt ssl shutdown
        service mqtt listen-port <% $portSeed++ %> web
        no service mqtt websocket shutdown
        service mqtt listen-port <% $portSeed++ %> ssl web
        no service mqtt websocket-secure shutdown
        exit

        message-spool message-vpn <% $msgVpnName %>
          max-spool-usage 4000
          no allow-unknown-publisher-flow
          max-transacted-sessions 200
          max-transactions 1000
          max-endpoints 200
          max-egress-flows 200
          max-ingress-flows 200
          exit
      
        client-profile "default" message-vpn <% $msgVpnName %>
          service smf max-connections-per-client-username 200
          service web-transport max-connections-per-client-username 200
          max-connections-per-client-username 200
          max-subscriptions 100000
          message-spool allow-guaranteed-endpoint-create
          message-spool allow-guaranteed-message-receive
          message-spool allow-guaranteed-message-send
          message-spool allow-transacted-sessions
          message-spool allow-cut-through-forwarding
          message-spool max-transacted-sessions 200
          message-spool max-transactions 1000
          message-spool max-endpoints-per-client-username 200
          message-spool max-egress-flows 200
          message-spool max-ingress-flows 200
          exit


        acl-profile "default" message-vpn <% $msgVpnName %>
          client-connect default-action "allow"
          publish-topic default-action "allow"
          subscribe-topic default-action "allow"
          exit

        client-username "default" message-vpn <% $msgVpnName %>
          shutdown
          exit

%       for my $cuId (1 .. $countClientUsernames)
%       {
            create client-username <% $msgVpnName %>.cu<% sprintf("%06d", $cuId) %> message-vpn <% $msgVpnName %>
              acl-profile "default"
              client-profile "default"
              no shutdown
              exit
%       }

        ! Create JNDI: 
        jndi message-vpn <% $msgVpnName %>
          no shutdown
          
        ! pragma:interpreter:ignore-already-exists
          create connection-factory "<% $msgVpnName %>.jndi.cf001"
        ! pragma:interpreter:no-ignore-already-exists
            property-list "messaging-properties"
              property "default-delivery-mode" "persistent"
              property "text-msg-xml-payload" "true"
              property "xa" "true"
              exit
            property-list "transport-properties"
              property "reconnect-retries" "20"
              property "reconnect-retry-wait" "3000"
              property "connect-retries-per-host" "5"
              property "connect-retries" "1"
              property "keep-alive-enabled" "true"
              property "keep-alive-interval" "3000"
              property "keep-alive-count-max" "3"
              property "tcp-no-delay" "false"
              property "direct-transport" "false"
              exit
            exit
          exit

          
        ! Enable Message Vpn: 
        message-vpn <% $msgVpnName %>
          no shutdown
          replication
            state "standby"
            shutdown
            exit
          exit


        create username "<% $msgVpnName %>-mgmt" password temppassword cli
        end
        configure
        username "<% $msgVpnName %>-mgmt"
          global-access-level "none"
          message-vpn
            default-access-level "none"
            create access-level-exception "<% $msgVpnName %>"
            access-level "read-write"
            exit
          exit
        exit
        
        authentication
          replace-duplicate-client-connections
          user-class cli
            access-level
              default
                global-access-level "none"
                message-vpn
                  default-access-level "none"
                  exit
                exit
              ldap
                no group-membership-attribute-name
                exit
              exit
            auth-type "internal"
            no radius-domain
            exit
          exit
        
        end
%   }
%} else {
 
%   my $countClientUsernames = 100;

    # Configure for dedicated access.
    home
    enable
    configure

    # Disable default message VPN, and create VPN v001
    message-vpn "default"
        shutdown
    end

    home
    enable
    configure

    # SMF ports :
    #   plain-text port: SeedPort
    #   compressed port: SeedPort + 1
    #   routing-control port: SeedPort + 2
    #   ssl port : SeedPort + 3
    service smf shutdown
    service smf listen-port <% $portSeed++ %>
    service smf listen-port <% $portSeed++ %> compressed
    service smf listen-port <% $portSeed++ %> routing-control
    service smf listen-port <% $portSeed++ %> ssl
    no service smf shutdown

    # SMF Web-transport ports :
    #   plain-text port: SeedPort + 4
    #   plain-text port: SeedPort + 5
    service web-transport shutdown
    service web-transport listen-port <% $portSeed++ %>
    service web-transport listen-port <% $portSeed++ %> ssl
    no service web-transport shutdown

    ! pragma:interpreter:ignore-already-exists
    create message-vpn "v001"
    ! pragma:interpreter:no-ignore-already-exists
    exit

    message-vpn "v001"
    authentication
        user-class "client"
          basic auth-type "internal"
          no basic radius-domain
          no basic shutdown
          exit
    exit
    authorization
        user-class "client"
          ldap group-membership-attribute-name "memberOf"
          authorization-type "internal"
          exit
        exit
    max-connections 1000
    max-subscriptions 500000
    service smf max-connections 1000
    no service smf plain-text shutdown
    no service smf ssl shutdown
    service web-transport max-connections 1000
    service rest incoming max-connections 1000
    service rest incoming listen-port <% $portSeed++ %>
    no service rest incoming plain-text shutdown
    service rest incoming listen-port <% $portSeed++ %> ssl
    no service rest incoming ssl shutdown
    service rest outgoing max-connections 1000
    service mqtt max-connections 200
    service mqtt listen-port <% $portSeed++ %>
    no service mqtt plain-text shutdown
    service mqtt listen-port <% $portSeed++ %> ssl
    no service mqtt ssl shutdown
    service mqtt listen-port <% $portSeed++ %> web
    no service mqtt websocket shutdown
    service mqtt listen-port <% $portSeed++ %> ssl web
    no service mqtt websocket-secure shutdown
    exit

    message-spool message-vpn "v001"
      max-spool-usage 20000
      no allow-unknown-publisher-flow
      max-transacted-sessions 1000
      max-transactions 5000
      max-endpoints 1000
      max-egress-flows 1000
      max-ingress-flows 1000
      exit
  
    client-profile "default" message-vpn "v001"
      service smf max-connections-per-client-username 1000
      service web-transport max-connections-per-client-username 1000
      max-connections-per-client-username 1000
      max-subscriptions 500000
      message-spool allow-guaranteed-endpoint-create
      message-spool allow-guaranteed-message-receive
      message-spool allow-guaranteed-message-send
      message-spool allow-transacted-sessions
      message-spool allow-cut-through-forwarding
      message-spool max-transacted-sessions 1000
      message-spool max-transactions 5000
      message-spool max-endpoints-per-client-username 1000
      message-spool max-egress-flows 1000
      message-spool max-ingress-flows 1000
      exit


    acl-profile "default" message-vpn "v001"
      client-connect default-action "allow"
      publish-topic default-action "allow"
      subscribe-topic default-action "allow"
      exit

    client-username "default" message-vpn "v001"
      shutdown
      exit

%       for my $cuId (1 .. $countClientUsernames)
%       {
        create client-username "v001.cu<% sprintf("%06d", $cuId) %>" message-vpn "v001"
          acl-profile "default"
          client-profile "default"
          no shutdown
          exit
%       }

    ! Create JNDI: 
    jndi message-vpn "v001"
      no shutdown
      no connection-factory /jms/cf/default
      
    ! pragma:interpreter:ignore-already-exists
      create connection-factory "v001.jndi.cf001"
    ! pragma:interpreter:no-ignore-already-exists
        property-list "messaging-properties"
          property "default-delivery-mode" "persistent"
          property "text-msg-xml-payload" "true"
          property "xa" "true"
          exit
        property-list "transport-properties"
          property "reconnect-retries" "20"
          property "reconnect-retry-wait" "3000"
          property "connect-retries-per-host" "5"
          property "connect-retries" "1"
          property "keep-alive-enabled" "true"
          property "keep-alive-interval" "3000"
          property "keep-alive-count-max" "3"
          property "tcp-no-delay" "false"
          property "direct-transport" "false"
          exit
        exit
      exit

      
    ! Enable Message Vpn: 
    message-vpn "v001"
      no shutdown
      replication
        state "standby"
        shutdown
        exit
      exit

    create username "v001-mgmt" password temppassword cli
    end
    configure
    username "v001-mgmt"
      global-access-level "none"
      message-vpn
        default-access-level "none"
        create access-level-exception "default"
        access-level "read-write"
        exit
      exit
    exit
    
    authentication
      replace-duplicate-client-connections
      user-class cli
        access-level
          default
            global-access-level "none"
            message-vpn
              default-access-level "none"
              exit
            exit
          ldap
            no group-membership-attribute-name
            exit
          exit
        auth-type "internal"
        no radius-domain
        exit
      exit

    
    end


%}
