#!/bin/bash

function removeFromList {
  input=$1

  output=""
  for item in $input
  do
    if [[ "$item" != "$2" ]]; then
      output="${output} $item"
    fi
  done
}
function setupTls {
  <% if_p("cert_pem","private_key_pem") do |cert_pem,private_key_pem| %>
     # Install the server certificate on this VMR
     echo "Installing Server Certificate on ${VMR_IP}:${SSH_PORT}..."
     sudo SSHPASS=$FILEUSER_PWD sshpass -e scp -P $SSH_PORT /var/vcap/jobs/config_vmr/config/server.pem fileuser@$VMR_IP:/certs
     ./rs-config-server-cert --cli-username $ADMIN_USER --cli-password $ADMIN_PASSWORD $VMR_IP:$SSH_PORT certificate="server.pem"
     sudo SSHPASS=$FILEUSER_PWD sshpass -e scp -P $SSH_PORT /var/vcap/jobs/config_vmr/config/server.pem fileuser@$VMR_IP:/certs
     echo "rm certs/server.pem" | sudo SSHPASS=$FILEUSER_PWD sshpass -e sftp -P 2222 fileuser@$VMR_IP
     echo "Done."
  <% end.else do %>
     echo "Disabling Server Certificate on ${VMR_IP}:${SSH_PORT}..."
     ./rs-config-rm-server-cert --cli-username $ADMIN_USER --cli-password $ADMIN_PASSWORD $VMR_IP:$SSH_PORT
     echo "Done."
  <% end%>
}

set -e

cd /var/vcap/packages/vmr_config_scripts

tar zxf vmr_config_scripts.tgz
cd src/vmr_config_scripts

export PATH=`pwd`:$PATH
export HOME=`pwd`

chmod +x run-router-script
chmod +x rs-config-vmr-for-maas
chmod +x rs-config-server-cert

echo "DEDICATED_VMR_LIST = <%= properties.dedicated_vmr_list %>"
echo "SHARED_VMR_LIST = <%= properties.shared_vmr_list %>"
echo "STARTING_PORT = <%= properties.starting_port %>"
echo "BROKER_USER = <%= properties.broker_user %>"
echo "BROKER_PASSWORD = <%= properties.broker_password %>"
echo "BROKER_HOSTNAME = <%= properties.broker_hostname %>"
echo "SSH_PORT = <%= properties.ssh_port %>"
echo "ADMIN_PASSWORD = <%= properties.admin_password %>"

# Installs perl modules required to run rs scripts, and jq so we
# are able to easily parse JSON from this bash script
sudo apt-get install -y libexpect-perl libterm-readkey-perl sshpass ruby

STARTING_PORT=<%= properties.starting_port %>
BROKER_USER=<%= properties.broker_user %>
BROKER_PASSWORD=<%= properties.broker_password %>
BROKER_HOSTNAME=<%= properties.broker_hostname %>
SSH_PORT=<%= properties.ssh_port %>
ADMIN_USER=admin
ADMIN_PASSWORD=<%= properties.admin_password %>
# Let's keep it simple, fileuser will be using admin password.  Makes it easier to change the TLS configs for already
# configured VMRs, as we don't have to remember a randomly chosen password.
FILEUSER_PWD=$ADMIN_PASSWORD

<% if_p("dedicated_vmr_list") do |vmrs| %>
  echo "List of dedicated VMRs:"
  <% for vmr in vmrs %>
    echo <%= vmr %>
  <% end %>
<% end %>

<% if_p("shared_vmr_list") do |vmrs| %>
  echo "List of shared VMRs:"
  <% for vmr in vmrs %>
    echo <%= vmr %>
  <% end %>
<% end %>

TIMEOUT=600

echo "Waiting for Solace Service Broker to be available..."
# Wait until Service Broker is ready
RESULT=0
while [ $RESULT -eq 0 ]
do
  RES=`curl -sL -X GET -w "%{http_code}\\n" "$BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/status" -o body.txt`
  if [ $RES -eq "200" ]; then
    echo "Service Broker is UP.  Initial State: "
    cat body.txt
    echo ""
    RESULT=1
  else
    TIMEOUT=$((TIMEOUT-10))
    if [ $TIMEOUT -lt 0 ]; then
      echo "FATAL: Timed out while waiting for Service Broker to start."
      exit 1
    else
      echo "Service Broker still DOWN, HTTP Response Code: $RES.  Will retry in 10 seconds."
    fi
    sleep 10
  fi
done

EXISTING_DEDICATED_VMRS=""
MANAGED_ROUTER_JSON_LIST="["

<% if_p("dedicated_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
  VMR_IP=<%= vmr_ip %>

  if [ "$MANAGED_ROUTER_JSON_LIST" != "[" ]; then
    MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST},"
  fi
  MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}""{ \"sempHost\": \"$VMR_IP\",  \"sempPort\": \"8080\", \"sempUser\": \"$ADMIN_USER\", \"sempPassword\": \"$ADMIN_PASSWORD\", \"planId\": \"9bd51219-9cee-4570-99ab-ebe80d82c854\", \"sshPort\" : \"$SSH_PORT\" }"
  EXISTING_DEDICATED_VMRS="${EXISTING_DEDICATED_VMRS} ${VMR_IP}"

  <% end %>
<% end %>

EXISTING_SHARED_VMRS=""
<% if_p("shared_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
  VMR_IP=<%= vmr_ip %>

  if [ "$MANAGED_ROUTER_JSON_LIST" != "[" ]; then
    MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST},"
  fi
  MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}""{ \"sempHost\": \"$VMR_IP\",  \"sempPort\": \"8080\", \"sempUser\": \"$ADMIN_USER\", \"sempPassword\": \"$ADMIN_PASSWORD\", \"planId\": \"af308299-102f-47a3-acb0-7de72be192bf\", \"sshPort\" : \"$SSH_PORT\" }"
  EXISTING_SHARED_VMRS="${EXISTING_SHARED_VMRS} ${VMR_IP}"

  <% end %>
<% end %>

MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}]"

echo "curl -X GET $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/manage/solace_message_routers -d "'"'"${MANAGED_ROUTER_JSON_LIST}"'"'

RESPONSE=`curl -X GET $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/manage/solace_message_routers -d "${MANAGED_ROUTER_JSON_LIST}" -H "Content-Type: application/json;charset=UTF-8"`
echo "Service Broker: $RESPONSE"

# Iterate through each element of the returned JSON erray (Via extractIpPort.rb)
while read i; do
   if [ ! -z "$i" ]; then
     CURRENT_HOST=`echo "$i" | awk '{print $1}'`
     CURRENT_PORT=`echo "$i" | awk '{print $2}'`
     CURRENT_PLAN_ID=`echo "$i" | awk '{print $3}'`

     if [ "$CURRENT_PLAN_ID" = "9bd51219-9cee-4570-99ab-ebe80d82c854" ]; then
        echo "Configuring a dedicated VMR: ${CURRENT_HOST}:${CURRENT_PORT}..."
        ./rs-config-vmr-for-maas --cli-username $ADMIN_USER  --cli-password $ADMIN_PASSWORD $CURRENT_HOST:$CURRENT_PORT plan=dedicated portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
        echo "Done."
     else
        echo "Configuring a shared VMR: ${CURRENT_HOST}:${CURRENT_PORT}..."
        ./rs-config-vmr-for-maas --cli-username $ADMIN_USER --cli-password $ADMIN_PASSWORD $CURRENT_HOST:$CURRENT_PORT plan=shared portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
        echo "Done."
     fi

     #Remove this host from the lists.  It was added, so was not existing before this deployment
     removeFromList "${EXISTING_DEDICATED_VMRS}" ${CURRENT_HOST}
     EXISTING_DEDICATED_VMRS="${output}"
     removeFromList "${EXISTING_SHARED_VMRS}" ${CURRENT_HOST}
     EXISTING_SHARED_VMRS="${output}"
   fi
done < <(echo $RESPONSE | ruby /var/vcap/jobs/config_vmr/bin/extractIpPort.rb)

echo "Updating configuration for these Large-VMR hosts which already existed before this deployment: $EXISTING_DEDICATED_VMRS."
for CURRENT_HOST in $EXISTING_DEDICATED_VMRS; do
  echo "Updating configuration for host $CURRENT_HOST"
  ./rs-update-config-for-maas --cli-username $ADMIN_USER --cli-password $ADMIN_PASSWORD $CURRENT_HOST:$SSH_PORT plan=dedicated portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
done

echo "Updating configuration for these Shared-VMR hosts which already existed before this deployment: $EXISTING_SHARED_VMRS."
for CURRENT_HOST in $EXISTING_SHARED_VMRS; do
  echo "Updating configuration for host $CURRENT_HOST"
  ./rs-update-config-for-maas --cli-username $ADMIN_USER --cli-password $ADMIN_PASSWORD $CURRENT_HOST:$SSH_PORT plan=shared portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
done

<% if_p("shared_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
    VMR_IP=<%= vmr_ip %>

    setupTls
  <% end %>
<% end %>

<% if_p("dedicated_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
    VMR_IP=<%= vmr_ip %>

    setupTls
  <% end %>
<% end %>

curl -X POST $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/manage/solace_message_routers -d "${MANAGED_ROUTER_JSON_LIST}"  -H "Content-Type: application/json;charset=UTF-8"
