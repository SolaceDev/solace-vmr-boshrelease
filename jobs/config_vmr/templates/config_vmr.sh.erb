#!/bin/bash

function removeFromList {
  input=$1

  output=""
  for item in $input
  do
    if [[ "$item" != "$2" ]]; then
      output="${output} $item"
    fi
  done
}
function setupTls {
  <% if_p("cert_pem","private_key_pem") do |cert_pem,private_key_pem| %>
    # Install the server certificate on this VMR
    echo "Installing Server Certificate on ${VMR_IP}:${SSH_PORT}..."
    sudo SSHPASS="$FILEUSER_PWD" sshpass -e scp -P $SSH_PORT /var/vcap/jobs/config_vmr/config/server.pem fileuser@$VMR_IP:/certs
    ./rs-config-server-cert --cli-username $ADMIN_USER --cli-password "$ADMIN_PASSWORD" $VMR_IP:$SSH_PORT certificate="server.pem"
    sudo SSHPASS="$FILEUSER_PWD" sshpass -e scp -P $SSH_PORT /var/vcap/jobs/config_vmr/config/server.pem fileuser@$VMR_IP:/certs
    echo "rm certs/server.pem" | sudo SSHPASS="$FILEUSER_PWD" sshpass -e sftp -P 2222 fileuser@$VMR_IP
    echo "Done."
  <% end.else do %>
    echo "Disabling Server Certificate on ${VMR_IP}:${SSH_PORT}..."
    ./rs-config-rm-server-cert --cli-username $ADMIN_USER --cli-password "$ADMIN_PASSWORD" $VMR_IP:$SSH_PORT
    echo "Done."
  <% end%>
}

set -e

cd /var/vcap/packages/vmr_config_scripts

tar zxf vmr_config_scripts.tgz
cd src/vmr_config_scripts

export PATH=`pwd`:$PATH
export HOME=`pwd`

chmod +x run-router-script
chmod +x rs-config-vmr-for-maas
chmod +x rs-config-server-cert
echo "LARGE_VMR_INSTANCES = <%= properties.large_vmr_instances_list %>"
echo "MEDIUM_VMR_INSTANCES = <%= properties.medium_vmr_instances_list %>"
echo "COMMUNITY_VMR_INSTANCES = <%= properties.community_vmr_instances_list %>"


echo "LARGE_VMR_LIST = <%= properties.large_vmr_list %>"
echo "MEDIUM_VMR_LIST = <%= properties.medium_vmr_list %>"
echo "COMMUNITY_VMR_LIST = <%= properties.community_vmr_list %>"
echo "STARTING_PORT = <%= properties.starting_port %>"
echo "BROKER_USER = <%= properties.broker_user %>"
echo "BROKER_PASSWORD = <%= properties.broker_password %>"
echo "BROKER_HOSTNAME = <%= properties.broker_hostname %>"
echo "SSH_PORT = <%= properties.ssh_port %>"
echo "ADMIN_PASSWORD = <%= properties.admin_password %>"

# Installs perl modules required to run rs scripts, and jq so we
# are able to easily parse JSON from this bash script
sudo apt-get install -y libexpect-perl libterm-readkey-perl sshpass ruby

STARTING_PORT=<%= properties.starting_port %>
BROKER_USER=<%= properties.broker_user %>
BROKER_PASSWORD='<%= properties.broker_password %>'
BROKER_HOSTNAME=<%= properties.broker_hostname %>
SSH_PORT=<%= properties.ssh_port %>
ADMIN_USER=admin
ADMIN_PASSWORD='<%= properties.admin_password %>'
# Let's keep it simple, fileuser will be using admin password.  Makes it easier to change the TLS configs for already
# configured VMRs, as we don't have to remember a randomly chosen password.
FILEUSER_PWD=$ADMIN_PASSWORD

<% if_p("large_vmr_list") do |vmrs| %>
  echo "List of Large-VMRs:"
  <% for vmr in vmrs %>
    echo <%= vmr %>
  <% end %>
<% end %>

<% if_p("medium_vmr_list") do |vmrs| %>
  echo "List of Medium-VMRs:"
  <% for vmr in vmrs %>
    echo <%= vmr %>
  <% end %>
<% end %>

<% if_p("community_vmr_list") do |vmrs| %>
  echo "List of Community-VMRs:"
  <% for vmr in vmrs %>
    echo <%= vmr %>
  <% end %>
<% end %>

TIMEOUT=600

echo "Waiting for Solace Service Broker to be available..."
# Wait until Service Broker is ready
RESULT=0
while [ $RESULT -eq 0 ]
do
  RES=`curl -sL -X GET -w "%{http_code}\\n" "$BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/status" -o body.txt`
  if [ $RES -eq "200" ]; then
    echo "Service Broker is UP.  Initial State: "
    cat body.txt
    echo ""
    RESULT=1
  else
    TIMEOUT=$((TIMEOUT-10))
    if [ $TIMEOUT -lt 0 ]; then
      echo "FATAL: Timed out while waiting for Service Broker to start."
      exit 1
    else
      echo "Service Broker still DOWN, HTTP Response Code: $RES.  Will retry in 10 seconds."
    fi
    sleep 10
  fi
done

EXISTING_LARGE_VMRS=""
MANAGED_ROUTER_JSON_LIST="["

<% if_p("large_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
  VMR_IP=<%= vmr_ip %>

  if [ "$MANAGED_ROUTER_JSON_LIST" != "[" ]; then
    MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST},"
  fi
  MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}""{ \"sempHost\": \"$VMR_IP\",  \"sempPort\": \"8080\", \"sempUser\": \"$ADMIN_USER\", \"sempPassword\": \"$ADMIN_PASSWORD\", \"poolName\": \"Large-VMR\", \"sshPort\" : \"$SSH_PORT\" }"
  EXISTING_LARGE_VMRS="${EXISTING_LARGE_VMRS} ${VMR_IP}"

  <% end %>
<% end %>

EXISTING_MEDIUM_VMRS=""
<% if_p("medium_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
  VMR_IP=<%= vmr_ip %>

  if [ "$MANAGED_ROUTER_JSON_LIST" != "[" ]; then
    MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST},"
  fi
  MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}""{ \"sempHost\": \"$VMR_IP\",  \"sempPort\": \"8080\", \"sempUser\": \"$ADMIN_USER\", \"sempPassword\": \"$ADMIN_PASSWORD\", \"poolName\": \"Medium-VMR\", \"sshPort\" : \"$SSH_PORT\" }"
  EXISTING_MEDIUM_VMRS="${EXISTING_MEDIUM_VMRS} ${VMR_IP}"

  <% end %>
<% end %>

EXISTING_COMMUNITY_VMRS=""
<% if_p("community_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
  VMR_IP=<%= vmr_ip %>

  if [ "$MANAGED_ROUTER_JSON_LIST" != "[" ]; then
    MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST},"
  fi

  MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}""{ \"sempHost\": \"$VMR_IP\",  \"sempPort\": \"8080\", \"sempUser\": \"$ADMIN_USER\", \"sempPassword\": \"$ADMIN_PASSWORD\", \"poolName\": \"Community-VMR\", \"sshPort\" : \"$SSH_PORT\" }"
  EXISTING_COMMUNITY_VMRS="${EXISTING_COMMUNITY_VMRS} ${VMR_IP}"

  <% end %>
<% end %>

MANAGED_ROUTER_JSON_LIST="${MANAGED_ROUTER_JSON_LIST}]"

echo "curl -s -X GET $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/manage/solace_message_routers -d "'"'"${MANAGED_ROUTER_JSON_LIST}"'"'

RESPONSE=`curl -s -X GET $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/manage/solace_message_routers -d "${MANAGED_ROUTER_JSON_LIST}" -H "Content-Type: application/json;charset=UTF-8"`
echo "Service Broker: $RESPONSE"

# Iterate through each element of the returned JSON erray (Via extractIpPort.rb)
while read i; do
  if [ ! -z "$i" ]; then
    CURRENT_HOST=`echo "$i" | awk '{print $1}'`
    CURRENT_PORT=`echo "$i" | awk '{print $2}'`
    CURRENT_POOL_NAME=`echo "$i" | awk '{print $3}'`

    echo "Configuring a ${CURRENT_POOL_NAME} VMR: ${CURRENT_HOST}:${CURRENT_PORT}..."
    ./rs-config-vmr-for-maas --cli-username $ADMIN_USER --cli-password "$ADMIN_PASSWORD" $CURRENT_HOST:$CURRENT_PORT poolName=$CURRENT_POOL_NAME portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
    echo "Done."

    #Remove this host from the lists.  It was added, so was not existing before this deployment
    removeFromList "${EXISTING_LARGE_VMRS}" ${CURRENT_HOST}
    EXISTING_LARGE_VMRS="${output}"
    removeFromList "${EXISTING_MEDIUM_VMRS}" ${CURRENT_HOST}
    EXISTING_MEDIUM_VMRS="${output}"
    removeFromList "${EXISTING_COMMUNITY_VMRS}" ${CURRENT_HOST}
    EXISTING_COMMUNITY_VMRS="${output}"
  fi
done < <(echo $RESPONSE | ruby /var/vcap/jobs/config_vmr/bin/extractIpPort.rb)

echo "Updating configuration for these Large-VMR hosts which already existed before this deployment: $EXISTING_LARGE_VMRS."
for CURRENT_HOST in $EXISTING_LARGE_VMRS; do
  echo "Updating configuration for host $CURRENT_HOST"
  ./rs-update-config-for-maas --cli-username $ADMIN_USER --cli-password "$ADMIN_PASSWORD" $CURRENT_HOST:$SSH_PORT poolName=Large-VMR portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
done

echo "Updating configuration for these Medium-VMR hosts which already existed before this deployment: $EXISTING_MEDIUM_VMRS."
for CURRENT_HOST in $EXISTING_MEDIUM_VMRS; do
  echo "Updating configuration for host $CURRENT_HOST"
  ./rs-update-config-for-maas --cli-username $ADMIN_USER --cli-password "$ADMIN_PASSWORD" $CURRENT_HOST:$SSH_PORT poolName=Medium-VMR portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
done

echo "Updating configuration for these Community-VMR hosts which already existed before this deployment: $EXISTING_COMMUNITY_VMRS."
for CURRENT_HOST in $EXISTING_COMMUNITY_VMRS; do
  echo "Updating configuration for host $CURRENT_HOST"
  ./rs-update-config-for-maas --cli-username $ADMIN_USER --cli-password "$ADMIN_PASSWORD" $CURRENT_HOST:$SSH_PORT poolName=Community-VMR portSeed=$STARTING_PORT fileUserPass=$FILEUSER_PWD adminPass=$ADMIN_PASSWORD
done

<% if_p("medium_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
    VMR_IP=<%= vmr_ip %>

    setupTls
  <% end %>
<% end %>

<% if_p("large_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
    VMR_IP=<%= vmr_ip %>

    setupTls
  <% end %>
<% end %>

<% if_p("community_vmr_list") do |vmrs| %>
  <% vmrs.each do |vmr_ip| %>
    VMR_IP=<%= vmr_ip %>

    setupTls
  <% end %>
<% end %>

echo "Committing the VMRs list to the Service Broker..."
curl -s -X POST $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/manage/solace_message_routers -d "${MANAGED_ROUTER_JSON_LIST}"  -H "Content-Type: application/json;charset=UTF-8"

echo ""
echo "Validating VMR state with the Service Broker..."
RESPONSE=`curl -s -X GET $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/resources/solace_message_routers/summary`

while read i
do
  if [ ! -z "$i" ]
  then
    CURRENT_HOST_IP=`echo "$i" | awk '{print $1}'`
    CURRENT_HOST_STATUS=`echo "$i" | awk '{print $2}'`

    echo "Status reported by Service Broker for $CURRENT_HOST_IP: $CURRENT_HOST_STATUS"

    if [ "$CURRENT_HOST_STATUS" != "OK" ]
    then
      echo "Service Broker reported an issue with VMR $CURRENT_HOST_IP...  Deployment will fail."
      echo "Dumping the detailed status of all VMRs :"
      curl -s -X GET $BROKER_USER:$BROKER_PASSWORD@$BROKER_HOSTNAME/solace/resources/solace_message_routers/details
      exit 1
    fi
  fi
done  < <(echo $RESPONSE | ruby /var/vcap/jobs/config_vmr/bin/parseSBSummary.rb)
